!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOOT	Makefile	/^BOOT   := boot.bin$/;"	m
BOOT_C	Makefile	/^BOOT_C := $(wildcard $(BOOT_DIR)\/*.c)$/;"	m
BOOT_DIR	Makefile	/^BOOT_DIR       := boot$/;"	m
BOOT_O	Makefile	/^BOOT_O := $(BOOT_S:%.S=$(OBJ_DIR)\/%.o)$/;"	m
BOOT_S	Makefile	/^BOOT_S := $(wildcard $(BOOT_DIR)\/*.S)$/;"	m
CC	Makefile	/^CC      := gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -Wall -Werror -Wfatal-errors #开启所有警告, 视警告为错误, 第一个错误结束编译$/;"	m
CR0_AM	boot/mmu.h	86;"	d
CR0_CD	boot/mmu.h	88;"	d
CR0_EM	boot/mmu.h	81;"	d
CR0_ET	boot/mmu.h	83;"	d
CR0_MP	boot/mmu.h	80;"	d
CR0_NE	boot/mmu.h	84;"	d
CR0_NW	boot/mmu.h	87;"	d
CR0_PE	boot/mmu.h	79;"	d
CR0_PG	boot/mmu.h	89;"	d
CR0_TS	boot/mmu.h	82;"	d
CR0_WP	boot/mmu.h	85;"	d
CR4_DE	boot/mmu.h	94;"	d
CR4_MCE	boot/mmu.h	92;"	d
CR4_PCE	boot/mmu.h	91;"	d
CR4_PSE	boot/mmu.h	93;"	d
CR4_PVI	boot/mmu.h	96;"	d
CR4_TSD	boot/mmu.h	95;"	d
CR4_VME	boot/mmu.h	97;"	d
DD	Makefile	/^DD      := dd$/;"	m
DEPS	Makefile	/^DEPS := $(shell find -name "*.d")$/;"	m
FEC_PR	boot/mmu.h	123;"	d
FEC_U	boot/mmu.h	125;"	d
FEC_WR	boot/mmu.h	124;"	d
FL_AC	boot/mmu.h	117;"	d
FL_AF	boot/mmu.h	102;"	d
FL_CF	boot/mmu.h	100;"	d
FL_DF	boot/mmu.h	107;"	d
FL_ID	boot/mmu.h	120;"	d
FL_IF	boot/mmu.h	106;"	d
FL_IOPL_0	boot/mmu.h	110;"	d
FL_IOPL_1	boot/mmu.h	111;"	d
FL_IOPL_2	boot/mmu.h	112;"	d
FL_IOPL_3	boot/mmu.h	113;"	d
FL_IOPL_MASK	boot/mmu.h	109;"	d
FL_NT	boot/mmu.h	114;"	d
FL_OF	boot/mmu.h	108;"	d
FL_PF	boot/mmu.h	101;"	d
FL_RF	boot/mmu.h	115;"	d
FL_SF	boot/mmu.h	104;"	d
FL_TF	boot/mmu.h	105;"	d
FL_VIF	boot/mmu.h	118;"	d
FL_VIP	boot/mmu.h	119;"	d
FL_VM	boot/mmu.h	116;"	d
FL_ZF	boot/mmu.h	103;"	d
GDB	Makefile	/^GDB     := gdb$/;"	m
GDB_OPTIONS	Makefile	/^GDB_OPTIONS := -ex "target remote 127.0.0.1:1234"$/;"	m
Gatedesc	boot/mmu.h	/^struct Gatedesc {$/;"	s
IMAGE	Makefile	/^IMAGE  := disk.bin$/;"	m
JOS_INC_MMU_H	boot/mmu.h	2;"	d
KERNEL	Makefile	/^KERNEL := kernel.bin$/;"	m
KERNEL_C	Makefile	/^KERNEL_C := $(shell find $(KERNEL_DIR) -name "*.c")$/;"	m
KERNEL_DIR	Makefile	/^KERNEL_DIR     := kernel$/;"	m
KERNEL_O	Makefile	/^KERNEL_O := $(KERNEL_C:%.c=$(OBJ_DIR)\/%.o)$/;"	m
KERNEL_S	Makefile	/^KERNEL_S := $(wildcard $(KERNEL_DIR)\/*.S)$/;"	m
LD	Makefile	/^LD      := ld$/;"	m
LD_SCRIPT	Makefile	/^LD_SCRIPT := $(shell find $(KERNEL_DIR) -name "*.ld")$/;"	m
LIB_C	Makefile	/^LIB_C := $(wildcard $(LIB_DIR)\/*.c)$/;"	m
LIB_DIR	Makefile	/^LIB_DIR        := lib$/;"	m
LIB_O	Makefile	/^LIB_O := $(LIB_C:%.c=$(OBJ_DIR)\/%.o)$/;"	m
NPDENTRIES	boot/mmu.h	45;"	d
NPTENTRIES	boot/mmu.h	46;"	d
OBJCOPY	Makefile	/^OBJCOPY := objcopy$/;"	m
OBJ_BOOT_DIR	Makefile	/^OBJ_BOOT_DIR   := $(OBJ_DIR)\/$(BOOT_DIR)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR        := obj$/;"	m
OBJ_KERNEL_DIR	Makefile	/^OBJ_KERNEL_DIR := $(OBJ_DIR)\/$(KERNEL_DIR)$/;"	m
OBJ_LIB_DIR	Makefile	/^OBJ_LIB_DIR    := $(OBJ_DIR)\/$(LIB_DIR)$/;"	m
PDX	boot/mmu.h	33;"	d
PDXSHIFT	boot/mmu.h	55;"	d
PGADDR	boot/mmu.h	42;"	d
PGNUM	boot/mmu.h	30;"	d
PGOFF	boot/mmu.h	39;"	d
PGSHIFT	boot/mmu.h	49;"	d
PGSIZE	boot/mmu.h	48;"	d
PTE_A	boot/mmu.h	63;"	d
PTE_ADDR	boot/mmu.h	76;"	d
PTE_AVAIL	boot/mmu.h	70;"	d
PTE_D	boot/mmu.h	64;"	d
PTE_G	boot/mmu.h	66;"	d
PTE_P	boot/mmu.h	58;"	d
PTE_PCD	boot/mmu.h	62;"	d
PTE_PS	boot/mmu.h	65;"	d
PTE_PWT	boot/mmu.h	61;"	d
PTE_SYSCALL	boot/mmu.h	73;"	d
PTE_U	boot/mmu.h	60;"	d
PTE_W	boot/mmu.h	59;"	d
PTSHIFT	boot/mmu.h	52;"	d
PTSIZE	boot/mmu.h	51;"	d
PTX	boot/mmu.h	36;"	d
PTXSHIFT	boot/mmu.h	54;"	d
Pseudodesc	boot/mmu.h	/^struct Pseudodesc {$/;"	s
QEMU	Makefile	/^QEMU    := qemu-system-i386$/;"	m
QEMU_DEBUG_OPTIONS	Makefile	/^QEMU_DEBUG_OPTIONS := -S #启动不执行$/;"	m
QEMU_OPTIONS	Makefile	/^QEMU_OPTIONS := -serial stdio #以标准输入输为串口(COM1)$/;"	m
SEG	boot/mmu.h	142;"	d
SEG	boot/mmu.h	172;"	d
SEG16	boot/mmu.h	176;"	d
SEG_FAULT	boot/mmu.h	170;"	d
SEG_NULL	boot/mmu.h	139;"	d
SEG_NULL	boot/mmu.h	168;"	d
SETCALLGATE	boot/mmu.h	296;"	d
SETGATE	boot/mmu.h	282;"	d
STA_A	boot/mmu.h	189;"	d
STA_C	boot/mmu.h	186;"	d
STA_E	boot/mmu.h	185;"	d
STA_R	boot/mmu.h	188;"	d
STA_W	boot/mmu.h	187;"	d
STA_X	boot/mmu.h	184;"	d
STS_CG16	boot/mmu.h	195;"	d
STS_CG32	boot/mmu.h	201;"	d
STS_IG16	boot/mmu.h	197;"	d
STS_IG32	boot/mmu.h	202;"	d
STS_LDT	boot/mmu.h	193;"	d
STS_T16A	boot/mmu.h	192;"	d
STS_T16B	boot/mmu.h	194;"	d
STS_T32A	boot/mmu.h	199;"	d
STS_T32B	boot/mmu.h	200;"	d
STS_TG	boot/mmu.h	196;"	d
STS_TG16	boot/mmu.h	198;"	d
STS_TG32	boot/mmu.h	203;"	d
Segdesc	boot/mmu.h	/^struct Segdesc {$/;"	s
Taskstate	boot/mmu.h	/^struct Taskstate {$/;"	s
gd_args	boot/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:Gatedesc
gd_dpl	boot/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:Gatedesc
gd_off_15_0	boot/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:Gatedesc
gd_off_31_16	boot/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:Gatedesc
gd_p	boot/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:Gatedesc
gd_rsv1	boot/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:Gatedesc
gd_s	boot/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:Gatedesc
gd_sel	boot/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:Gatedesc
gd_type	boot/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:Gatedesc
gdt	boot/start.S	/^gdt:$/;"	l
gdtdesc	boot/start.S	/^gdtdesc:                           # GDT描述符$/;"	l
pd_base	boot/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc
pd_lim	boot/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc
sd_avl	boot/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:Segdesc
sd_base_15_0	boot/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:Segdesc
sd_base_23_16	boot/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:Segdesc
sd_base_31_24	boot/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:Segdesc
sd_db	boot/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:Segdesc
sd_dpl	boot/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:Segdesc
sd_g	boot/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:Segdesc
sd_lim_15_0	boot/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:Segdesc
sd_lim_19_16	boot/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:Segdesc
sd_p	boot/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:Segdesc
sd_rsv1	boot/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:Segdesc
sd_s	boot/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:Segdesc
sd_type	boot/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:Segdesc
start	boot/start.S	/^start:$/;"	l
start32	boot/start.S	/^start32:$/;"	l
ts_cr3	boot/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:Taskstate
ts_cs	boot/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:Taskstate
ts_ds	boot/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:Taskstate
ts_eax	boot/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:Taskstate
ts_ebp	boot/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:Taskstate
ts_ebx	boot/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:Taskstate
ts_ecx	boot/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:Taskstate
ts_edi	boot/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:Taskstate
ts_edx	boot/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:Taskstate
ts_eflags	boot/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:Taskstate
ts_eip	boot/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:Taskstate
ts_es	boot/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:Taskstate
ts_esi	boot/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:Taskstate
ts_esp	boot/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:Taskstate
ts_esp0	boot/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:Taskstate
ts_esp1	boot/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:Taskstate
ts_esp2	boot/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:Taskstate
ts_fs	boot/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:Taskstate
ts_gs	boot/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:Taskstate
ts_iomb	boot/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:Taskstate
ts_ldt	boot/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:Taskstate
ts_link	boot/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:Taskstate
ts_padding1	boot/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:Taskstate
ts_padding10	boot/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:Taskstate
ts_padding2	boot/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:Taskstate
ts_padding3	boot/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:Taskstate
ts_padding4	boot/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:Taskstate
ts_padding5	boot/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:Taskstate
ts_padding6	boot/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:Taskstate
ts_padding7	boot/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:Taskstate
ts_padding8	boot/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:Taskstate
ts_padding9	boot/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:Taskstate
ts_ss	boot/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:Taskstate
ts_ss0	boot/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:Taskstate
ts_ss1	boot/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:Taskstate
ts_ss2	boot/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:Taskstate
ts_t	boot/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:Taskstate
